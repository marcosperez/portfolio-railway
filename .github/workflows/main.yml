name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  workflow_dispatch:

jobs:
  install_dependencies_backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache node modules
        id: cache-npm-backend
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm-backend.outputs.cache-hit == 'false' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      - name: Install dependencies
        run: cd backend && npm install

  build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [install_dependencies_backend]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache-npm-backend
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: (Backend) Install modules
        run: cd backend && npm install
      - name: (Backend) Build Server
        run: cd backend && npm run build
  test:
    runs-on: ubuntu-latest
    needs: [cache-build]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache-npm-backend
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: (Backend) Install modules
        run: cd backend && npm install
      - name: (Backend) Run Jest Backend
        run: cd backend && npm run test
